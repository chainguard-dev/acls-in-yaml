package axs

import (
	"fmt"
	"os"
	"os/user"
	"strings"
	"time"

	"github.com/gocarina/gocsv"
)

var (
	googleWorkspaceUsersSteps = []string{
		"Open https://admin.google.com/ac/users",
		"Click Download users",
		"Select 'All user info Columns'",
		"Select 'Comma-separated values (.csv)'",
	}
)

type googleWorkspaceUserRecord struct {
	EmailAddress      string `csv:"Email Address [Required]"`
	Status            string `csv:"Status [READ ONLY]"`
	FirstName         string `csv:"First Name [Required]"`
	LastName          string `csv:"Last Name [Required]"`
	LastSignIn        string `csv:"Last Sign In [READ ONLY]"`
	TwoFactorEnforced string `csv:"2sv Enforced [READ ONLY]"`
}

// GoogleWorkspaceUsers parses the CSV file generated by the users page
func GoogleWorkspaceUsers(path string) (*Artifact, error) {
	f, err := os.Open(path)
	if err != nil {
		return nil, fmt.Errorf("open: %w", err)
	}

	defer f.Close()

	fi, err := os.Stat(path)
	if err != nil {
		return nil, fmt.Errorf("stat: %w", err)
	}

	date := fi.ModTime()

	records := []googleWorkspaceUserRecord{}
	if err := gocsv.UnmarshalFile(f, &records); err != nil {
		return nil, fmt.Errorf("unmarshal: %w", err)
	}

	a := googleWorkspaceUserRecordsToArtifact(records)

	cu, err := user.Current()
	if err != nil {
		return nil, fmt.Errorf("user: %w", err)
	}

	a.GeneratedBy = cu.Username
	a.GeneratedAt = time.Now()
	a.SourceDate = date.Format(SourceDateFormat)

	return a, nil
}

func googleWorkspaceUserRecordsToArtifact(rs []googleWorkspaceUserRecord) *Artifact {
	a := &Artifact{
		Kind:    "google_workspace_users",
		Name:    "Google Workspace User List",
		Process: googleWorkspaceUsersSteps,
	}

	for _, r := range rs {
		username, _, _ := strings.Cut(r.EmailAddress, "@")
		u := User{
			Account: username,
			Name:    strings.TrimSpace(r.FirstName) + " " + strings.TrimSpace(r.LastName),
		}

		if r.Status != "Active" {
			u.Status = r.Status
		}
		a.Users = append(a.Users, u)
	}

	return a
}
