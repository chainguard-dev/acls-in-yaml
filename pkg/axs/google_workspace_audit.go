package axs

import (
	"bufio"
	"fmt"
	"os"
	"os/user"
	"regexp"
	"strings"
	"time"

	"github.com/gocarina/gocsv"
	"k8s.io/klog/v2"
)

var (
	googleWorkspaceAuditSteps = []string{
		"Open https://admin.google.com/ac/reporting/report/user/accounts",
		"Click Download icon",
		"Select All Columns",
		"Click CSV",
	}

	googleAuditDateRegexp = regexp.MustCompile(` \[(\d{4}-\d{2}-\d{2}) GMT\]`)
)

type googleWorkspaceAuditRecord struct {
	User        string `csv:"User"`
	Status      string `csv:"User account status"`
	AdminStatus string `csv:"Admin status"`
	Name        string `csv:"Admin-defined name"`
}

// GoogleWorkspaceUserAudit parses the CSV file generated by
func GoogleWorkspaceAudit(path string) (*Artifact, error) {
	f, err := os.Open(path)
	if err != nil {
		return nil, fmt.Errorf("open: %w", err)
	}

	defer f.Close()

	s := bufio.NewScanner(f)
	s.Split(bufio.ScanLines)
	lines := []string{}
	date := ""

	for s.Scan() {
		line := s.Text()
		if len(lines) == 0 {
			matches := googleAuditDateRegexp.FindStringSubmatch(line)
			if len(matches) > 1 {
				klog.Infof("found string: %s", matches[1])
				date = matches[1]
			}
			line = googleAuditDateRegexp.ReplaceAllString(line, "")
		}

		klog.Infof("line: %s", line)
		lines = append(lines, line)
	}

	neutered := strings.Join(lines, "\n")
	records := []googleWorkspaceAuditRecord{}
	if err := gocsv.UnmarshalString(neutered, &records); err != nil {
		return nil, fmt.Errorf("unmarshal: %w", err)
	}

	a := googleWorkspaceAuditRecordsToArtifact(records)

	cu, err := user.Current()
	if err != nil {
		return nil, fmt.Errorf("user: %w", err)
	}

	a.GeneratedBy = cu.Username
	a.GeneratedAt = time.Now()
	a.SourceDate = date

	return a, nil
}

func googleWorkspaceAuditRecordsToArtifact(rs []googleWorkspaceAuditRecord) *Artifact {
	a := &Artifact{
		Kind:    "google_workspace_audit",
		Name:    "Google Workspace User Audit",
		Process: googleWorkspaceAuditSteps,
	}

	for _, r := range rs {
		username, _, _ := strings.Cut(r.User, "@")
		u := User{
			Account: username,
			Name:    r.Name,
		}

		if r.AdminStatus != "None" {
			u.Permissions = []string{r.AdminStatus}
		}

		if r.Status != "Active" {
			u.Status = r.Status
		}
		a.Users = append(a.Users, u)
	}

	return a
}
